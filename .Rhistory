# convert the 'out' matrix into a data-frame (to enable the use of '$' to access a column by name)
out1 <- as.data.frame(out)
# plot susceptible class
par(mfrow = c(1,1))
plot(out1$S,
type = 'l',
xlab = paste('Time'),
ylab = 'Population',
ylim = c(0,120000),
col  = 4)
lines(out1$R, col=3)
lines(out1$I, col=2)
lines(out1$E, col=1)
# add legend
legend(x      = 'top',
legend = c('Susceptible','Infectious','Recovered',"Exposed"),
col    = c(4,2,3,1),
lwd    = 1,
ncol   = 3,
cex    = 0.9)
######################################### #
# INITIALIZE PARAMETERS AND POPULATION ----
######################################### #
initP <- 100000 # population size
initE <- 1 # Exposed
initI <- 0 # Infectious
initR <- 0 # Immune
initS <- initP - initE - initI - initR # Susceptible
# set time frame
times      <- seq(0, num_weeks, by = 1)
# set initial health states
states <- c(S = initS, E = initE, I = initI, R = initR)
# set parameters
params     <- c(gamma = 7/ num_days_exposed, #rate of movement from latent to infectious stage
nui = 7/num_days_infected,  # recovery rate
v =  7/ num_days_waning,    # rate of loss of immunity
mu = 1/(80*52),            # death rate
muo =1/(80*52),            # birth rate
amp=0,                  # the degree of seasonality, range [0,1],higher value stronger seasonal drivers
phi=0,                    # phase shift?
R0 =3,
report =1/7
)
# set up a function to solve the equations
RSV<-function(t, states, params)
{
with(as.list(c(states, params)),
{
# define variables
P <- (S+E+I+R)
seas<-1+amp*cos(2*pi*t/52+phi)
beta<-R0*(mu+nui)*(gamma+mu)/gamma
lam <- beta*seas*I/P
# rate of change
dS <- muo*P -lam*S + v*R -mu*S
dE <- lam*S - gamma*E - mu*E
dI <- gamma*E - nui*I - mu*I
dR <- nui*I - v*R - mu*R
# return the rate of change
list(c(dS, dE, dI, dR))
}
)
}
# run the model
out <- ode(y = states, times = times, func = RSV, parms = params)
# a simple plot of the model output
plot(out)
# some more model outputs
# total population
pop<-out[,"S"]+out[,"E"]+out[,"I"]+out[,"R"]
# weekly incidence
inc <- params["gamma"]*out[,"E"]
# make a new panel
par(mfrow=c(1,2))
# more plots
time<-out[,"time"]
plot(time,pop,type='l',lwd=3)
plot(time,inc,type='l',lwd=3)
rm(list=ls())
setwd("/home/phuong/phuonght/gitKraken_project/RSV")
library(deSolve)
######################################### #
# MODEL SETTINGS                     ----
######################################### #
pop_size          <- 100000
num_days          <- 500
num_weeks         <- 52*5
R0                <- 3
num_days_infected <- 6.7
num_days_exposed  <- 4
num_days_waning   <- 230 # best fit : 23.5 weeks => 164.5days
num_weeks_waning  <- 23.5
infected_seeds    <- 100 # ?
######################################### #
# INITIALIZE PARAMETERS AND POPULATION ----
######################################### #
#https://steemit.com/science/@fouad/x-history-of-math-symbols
# recovery parameter
gamma  <- 1/(num_days_infected/7)
# transmission parameter
beta0 <- 1.99 #average transmission rate
beta1 <- 0.65 #degree of seasonality [ 0,1], higher value stronger seasonal driver
phi <- 2.43 # shift phase
#rate of movement from latent to infectious stage
sigma <- 1/(num_days_exposed/7)
# duration of immunity
nu <- 1/(num_days_waning/7)
# death rate
eta <- 1/(80*52)
# birth rate
mu <- 1/(80*52)
# # population states
S <- 1 - (infected_seeds/pop_size)
E <- infected_seeds/pop_size
I <- 0
R <- 0
######################################### #
# SET FUNCTION PARAMETERS            ----
######################################### #
# set time frame
times      <- seq(0, num_weeks, by = 1)
# set initial health states
states     <- c(S = S,E = E, I = I, R = R)
# set parameters
params     <- c(gamma = gamma, nu = nu,mu = mu,
beta0 = beta0, beta1 = beta1, phi = phi)
######################################### #
# CREATE SIRV FUNCTION               ----
######################################### #
# define a function for the ODE-solver with 3 function parameters (required)
#  * times  = current time point (not yet used here, in the absence of seasonality)
#  * states = current health states, to calculate updates
#  * params = epidemiogical parameters, used in the differential equations
#
# Note: updating the health states over time and keeping track of the changes, is handled by the
# ode-function of the 'deSolve' package.
sirv_func <- function(t, states, params) {
# rename states and parameters
S     <- states['S']
E     <- states['E']
I     <- states['I']
R     <- states['R']
beta <- beta0*(1+beta1*cos(2*pi*t/52)+phi)
# gamma <- params['gamma']
# nui   <- params['nui']
# v   <- params['v']
# calculate state changes
dS <- mu -beta*S*I + nu*R - eta*S
dE <- beta*S*I - sigma*E - eta*E
dI <- sigma*E - gamma*I - eta*I
dR <- gamma*I - nu*R - eta*R
# return (dS, dI, dR) as a vector in a list (required for the 'solve' function)
return(list(c(dS, dE, dI, dR)))
}
######################################### #
# SOLVE ODE                          ----
######################################### #
# use the 'ode' function of deSolve package with our SIR function, health states and parameters
out <- ode(func = sirv_func, y = states, times = times, parms = params)
plot(out)
# convert the 'out' matrix into a data-frame (to enable the use of '$' to access a column by name)
out <- as.data.frame(out)
# total population
pop<-out[,"S"]+out[,"E"]+out[,"I"]+out[,"R"]
# weekly incidence
# inc <- params["report"]*params["gamma"]*out[,"E"]
inc <- params["gamma"]*out[,"E"]*pop_size
# make a new panel
par(mfrow=c(1,2))
# more plots
time<-out[,"time"]
plot(time,pop,type='l',lwd=3)
plot(time,inc,type='l',lwd=3)
rm(list=ls())
setwd("/home/phuong/phuonght/gitKraken_project/RSV")
library(deSolve)
######################################### #
# MODEL SETTINGS                     ----
######################################### #
pop_size          <- 100000
num_days          <- 500
num_weeks         <- 52*5
R0                <- 3
num_days_infected <- 6.7
num_days_exposed  <- 4
num_days_waning   <- 230
infected_seeds    <- 100
######################################### #
# INITIALIZE PARAMETERS AND POPULATION ----
######################################### #
initP <- 100000 # population size
initE <- 1 # Exposed
initI <- 0 # Infectious
initR <- 0 # Immune
initS <- initP - initE - initI - initR # Susceptible
# set time frame
times      <- seq(0, num_weeks, by = 1)
# set initial health states
states <- c(S = initS, E = initE, I = initI, R = initR)
# set parameters
params     <- c(sigma = 7/ num_days_exposed, #rate of movement from latent to infectious stage
gamma = 7/num_days_infected,  # recovery rate
nu=  7/ num_days_waning,    # rate of loss of immunity
eta = 1/(80*52),            # death rate
mu =1/(80*52),            # birth rate
beta1=0,                  # the degree of seasonality, range [0,1],higher value stronger seasonal drivers
phi=0,                    # phase shift?
beta0=0,                  #average transmission rate
R0 =3,
report =1/7
)
# set up a function to solve the equations
RSV<-function(t, states, params)
{
with(as.list(c(states, params)),
{
# define variables
P <- (S+E+I+R)
seas<-1+beta1*cos(2*pi*t/52+phi)
beta0<-R0*(mu+nu)*(sigma+mu)/sigma # (birth +recovery)*(birth+latent)/latent
lam <- beta0*seas*I/P
# rate of change
dS <- mu*P -lam*S + nu*R -eta*S
dE <- lam*S - sigma*E - eta*E
dI <- sigma*E - gamma*I - eta*I
dR <- gamma*I - nu*R - eta*R
# return the rate of change
list(c(dS, dE, dI, dR))
}
)
}
# run the model
out <- ode(y = states, times = times, func = RSV, parms = params)
# a simple plot of the model output
plot(out)
# some more model outputs
# total population
pop<-out[,"S"]+out[,"E"]+out[,"I"]+out[,"R"]
# weekly incidence
inc <- params["gamma"]*out[,"E"]
# make a new panel
par(mfrow=c(1,2))
# more plots
time<-out[,"time"]
plot(time,pop,type='l',lwd=3)
plot(time,inc,type='l',lwd=3)
# set parameters
params     <- c(sigma = 7/ num_days_exposed, #rate of movement from latent to infectious stage
gamma = 7/num_days_infected,  # recovery rate
nu=  7/ num_days_waning,    # rate of loss of immunity
eta = 1/(80*52),            # death rate
mu =1/(80*52),            # birth rate
beta1=0.65,                  # the degree of seasonality, range [0,1],higher value stronger seasonal drivers
phi=2.43,                    # phase shift?
beta0=1.99,                  #average transmission rate
R0 =3,
report =1/7
)
# set up a function to solve the equations
RSV<-function(t, states, params)
{
with(as.list(c(states, params)),
{
# define variables
P <- (S+E+I+R)
seas<-1+beta1*cos(2*pi*t/52+phi)
beta0<-R0*(mu+nu)*(sigma+mu)/sigma # (birth +recovery)*(birth+latent)/latent
lam <- beta0*seas*I/P
# rate of change
dS <- mu*P -lam*S + nu*R -eta*S
dE <- lam*S - sigma*E - eta*E
dI <- sigma*E - gamma*I - eta*I
dR <- gamma*I - nu*R - eta*R
# return the rate of change
list(c(dS, dE, dI, dR))
}
)
}
# run the model
out <- ode(y = states, times = times, func = RSV, parms = params)
# a simple plot of the model output
plot(out)
# some more model outputs
# total population
pop<-out[,"S"]+out[,"E"]+out[,"I"]+out[,"R"]
# weekly incidence
inc <- params["gamma"]*out[,"E"]
# make a new panel
par(mfrow=c(1,2))
# more plots
time<-out[,"time"]
plot(time,pop,type='l',lwd=3)
plot(time,inc,type='l',lwd=3)
# convert the 'out' matrix into a data-frame (to enable the use of '$' to access a column by name)
out1 <- as.data.frame(out)
# plot susceptible class
par(mfrow = c(1,1))
plot(out1$S,
type = 'l',
xlab = paste('Time'),
ylab = 'Population',
ylim = c(0,120000),
col  = 4)
lines(out1$R, col=3)
lines(out1$I, col=2)
lines(out1$E, col=1)
# add legend
legend(x      = 'top',
legend = c('Susceptible','Infectious','Recovered',"Exposed"),
col    = c(4,2,3,1),
lwd    = 1,
ncol   = 3,
cex    = 0.9)
pop
######################################### #
# INITIALIZE PARAMETERS AND POPULATION ----
######################################### #
initP <- 100000 # population size
initE <- 100 # Exposed
initI <- 0 # Infectious
initR <- 0 # Immune
initS <- initP - initE - initI - initR # Susceptible
# set time frame
times      <- seq(0, num_weeks, by = 1)
# set initial health states
states <- c(S = initS, E = initE, I = initI, R = initR)
# set parameters
params     <- c(sigma = 7/ num_days_exposed, #rate of movement from latent to infectious stage
gamma = 7/num_days_infected,  # recovery rate
nu=  7/ num_days_waning,    # rate of loss of immunity
eta = 1/(80*52),            # death rate
mu =1/(80*52),            # birth rate
beta1=0.65,                  # the degree of seasonality, range [0,1],higher value stronger seasonal drivers
phi=2.43,                    # phase shift?
beta0=1.99,                  #average transmission rate
R0 =3,
report =1/7
)
# set up a function to solve the equations
RSV<-function(t, states, params)
{
with(as.list(c(states, params)),
{
# define variables
P <- (S+E+I+R)
seas<-1+beta1*cos(2*pi*t/52+phi)
beta0<-R0*(mu+nu)*(sigma+mu)/sigma # (birth +recovery)*(birth+latent)/latent
lam <- beta0*seas*I/P
# rate of change
dS <- mu*P -lam*S + nu*R -eta*S
dE <- lam*S - sigma*E - eta*E
dI <- sigma*E - gamma*I - eta*I
dR <- gamma*I - nu*R - eta*R
# return the rate of change
list(c(dS, dE, dI, dR))
}
)
}
# run the model
out <- ode(y = states, times = times, func = RSV, parms = params)
# a simple plot of the model output
plot(out)
# some more model outputs
# total population
pop<-out[,"S"]+out[,"E"]+out[,"I"]+out[,"R"]
# weekly incidence
inc <- params["gamma"]*out[,"E"]
# make a new panel
par(mfrow=c(1,2))
# more plots
time<-out[,"time"]
plot(time,pop,type='l',lwd=3)
plot(time,inc,type='l',lwd=3)
# convert the 'out' matrix into a data-frame (to enable the use of '$' to access a column by name)
out1 <- as.data.frame(out)
# plot susceptible class
par(mfrow = c(1,1))
plot(out1$S,
type = 'l',
xlab = paste('Time'),
ylab = 'Population',
ylim = c(0,120000),
col  = 4)
lines(out1$R, col=3)
lines(out1$I, col=2)
lines(out1$E, col=1)
# add legend
legend(x      = 'top',
legend = c('Susceptible','Infectious','Recovered',"Exposed"),
col    = c(4,2,3,1),
lwd    = 1,
ncol   = 3,
cex    = 0.9)
rm(list=ls())
setwd("/home/phuong/phuonght/gitKraken_project/RSV")
library(deSolve)
######################################### #
# MODEL SETTINGS                     ----
######################################### #
pop_size          <- 100000
num_days          <- 500
num_weeks         <- 52*5
R0                <- 3
num_days_infected <- 6.7
num_days_exposed  <- 4
num_days_waning   <- 230 # best fit : 23.5 weeks => 164.5days
num_weeks_waning  <- 23.5
infected_seeds    <- 1 # ?
######################################### #
# INITIALIZE PARAMETERS AND POPULATION ----
######################################### #
#https://steemit.com/science/@fouad/x-history-of-math-symbols
# recovery parameter
gamma  <- 1/(num_days_infected/7)
# transmission parameter
beta0 <- 1.99 #average transmission rate
beta1 <- 0.65 #degree of seasonality [ 0,1], higher value stronger seasonal driver
phi <- 2.43 # shift phase
#rate of movement from latent to infectious stage
sigma <- 1/(num_days_exposed/7)
# duration of immunity
nu <- 1/(num_days_waning/7)
# death rate
eta <- 1/(80*52)
# birth rate
mu <- 1/(80*52)
# # population states
S <- 1 - (infected_seeds/pop_size)
E <- infected_seeds/pop_size
I <- 0
R <- 0
######################################### #
# SET FUNCTION PARAMETERS            ----
######################################### #
# set time frame
times      <- seq(0, num_weeks, by = 1)
# set initial health states
states     <- c(S = S,E = E, I = I, R = R)
# set parameters
params     <- c(gamma = gamma, nu = nu,mu = mu,
beta0 = beta0, beta1 = beta1, phi = phi)
######################################### #
# CREATE SIRV FUNCTION               ----
######################################### #
# define a function for the ODE-solver with 3 function parameters (required)
#  * times  = current time point (not yet used here, in the absence of seasonality)
#  * states = current health states, to calculate updates
#  * params = epidemiogical parameters, used in the differential equations
#
# Note: updating the health states over time and keeping track of the changes, is handled by the
# ode-function of the 'deSolve' package.
sirv_func <- function(t, states, params) {
# rename states and parameters
S     <- states['S']
E     <- states['E']
I     <- states['I']
R     <- states['R']
beta <- beta0*(1+beta1*cos(2*pi*t/52)+phi)
# gamma <- params['gamma']
# nui   <- params['nui']
# v   <- params['v']
# calculate state changes
dS <- mu -beta*S*I + nu*R - eta*S
dE <- beta*S*I - sigma*E - eta*E
dI <- sigma*E - gamma*I - eta*I
dR <- gamma*I - nu*R - eta*R
# return (dS, dI, dR) as a vector in a list (required for the 'solve' function)
return(list(c(dS, dE, dI, dR)))
}
######################################### #
# SOLVE ODE                          ----
######################################### #
# use the 'ode' function of deSolve package with our SIR function, health states and parameters
out <- ode(func = sirv_func, y = states, times = times, parms = params)
plot(out)
# convert the 'out' matrix into a data-frame (to enable the use of '$' to access a column by name)
out <- as.data.frame(out)
# total population
pop<-out[,"S"]+out[,"E"]+out[,"I"]+out[,"R"]
# weekly incidence
# inc <- params["report"]*params["gamma"]*out[,"E"]
inc <- params["gamma"]*out[,"E"]*pop_size
# make a new panel
par(mfrow=c(1,2))
# more plots
time<-out[,"time"]
plot(time,pop,type='l',lwd=3)
plot(time,inc,type='l',lwd=3)
plot(time,pop,type='l',lwd=3)
pop
pop
class(pop)
# weekly incidence
# inc <- params["report"]*params["gamma"]*out[,"E"]
inc <- params["sigma"]*out[,"E"]*pop_size
# make a new panel
par(mfrow=c(1,2))
# more plots
time <- out[,"time"]
plot(time,pop,type='l',lwd=3)
plot(time,inc,type='l',lwd=3)
# plot susceptible class
par(mfrow = c(1,1))
plot(out$S,
type = 'l',
xlab = 'Time',
ylab = 'Population fraction',
ylim = c(0,1.3),
col  = 4)
lines(out$R, col=3)
lines(out$I, col=2)
lines(out$E, col=1)
