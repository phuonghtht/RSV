# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
# #COMPARING THE MODEL OUTPUT WITH DATA--------------
# aus_data <- read.csv ("./Belgium RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# #15830 samples ( <- 2yrs, 2000-2005), possitive 21% ( n= 3394)
# par(mfrow=c(1,1))
# # label axes
# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
# #COMPARING THE MODEL OUTPUT WITH DATA--------------
# aus_data <- read.csv ("./Belgium RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# #15830 samples ( <- 2yrs, 2000-2005), possitive 21% ( n= 3394)
# par(mfrow=c(1,1))
# # label axes
# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
# #COMPARING THE MODEL OUTPUT WITH DATA--------------
# aus_data <- read.csv ("./Belgium RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# #15830 samples ( <- 2yrs, 2000-2005), possitive 21% ( n= 3394)
# par(mfrow=c(1,1))
# # label axes
# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
# #COMPARING THE MODEL OUTPUT WITH DATA--------------
# aus_data <- read.csv ("./Belgium RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# #15830 samples ( <- 2yrs, 2000-2005), possitive 21% ( n= 3394)
# par(mfrow=c(1,1))
# # label axes
# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
# #COMPARING THE MODEL OUTPUT WITH DATA--------------
# aus_data <- read.csv ("./Belgium RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# #15830 samples ( <- 2yrs, 2000-2005), possitive 21% ( n= 3394)
# par(mfrow=c(1,1))
# # label axes
# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
# #COMPARING THE MODEL OUTPUT WITH DATA--------------
# aus_data <- read.csv ("./Belgium RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# #15830 samples ( <- 2yrs, 2000-2005), possitive 21% ( n= 3394)
# par(mfrow=c(1,1))
# # label axes
# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
# #COMPARING THE MODEL OUTPUT WITH DATA--------------
# aus_data <- read.csv ("./Belgium RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# #15830 samples ( <- 2yrs, 2000-2005), possitive 21% ( n= 3394)
# par(mfrow=c(1,1))
# # label axes
# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
# #COMPARING THE MODEL OUTPUT WITH DATA--------------
# aus_data <- read.csv ("./Belgium RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# #15830 samples ( <- 2yrs, 2000-2005), possitive 21% ( n= 3394)
# par(mfrow=c(1,1))
# # label axes
# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
# #COMPARING THE MODEL OUTPUT WITH DATA--------------
# aus_data <- read.csv ("./Belgium RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# #15830 samples ( <- 2yrs, 2000-2005), possitive 21% ( n= 3394)
# par(mfrow=c(1,1))
# # label axes
# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
# #COMPARING THE MODEL OUTPUT WITH DATA--------------
# aus_data <- read.csv ("./Belgium RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# #15830 samples ( <- 2yrs, 2000-2005), possitive 21% ( n= 3394)
# par(mfrow=c(1,1))
# # label axes
# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
# #COMPARING THE MODEL OUTPUT WITH DATA--------------
# aus_data <- read.csv ("./Belgium RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# #15830 samples ( <- 2yrs, 2000-2005), possitive 21% ( n= 3394)
# par(mfrow=c(1,1))
# # label axes
# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
# #COMPARING THE MODEL OUTPUT WITH DATA--------------
# aus_data <- read.csv ("./Belgium RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# #15830 samples ( <- 2yrs, 2000-2005), possitive 21% ( n= 3394)
# par(mfrow=c(1,1))
# # label axes
# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
# #COMPARING THE MODEL OUTPUT WITH DATA--------------
# aus_data <- read.csv ("./Belgium RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# #15830 samples ( <- 2yrs, 2000-2005), possitive 21% ( n= 3394)
# par(mfrow=c(1,1))
# # label axes
# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
# #COMPARING THE MODEL OUTPUT WITH DATA--------------
# aus_data <- read.csv ("./Belgium RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# #15830 samples ( <- 2yrs, 2000-2005), possitive 21% ( n= 3394)
# par(mfrow=c(1,1))
# # label axes
# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
# #COMPARING THE MODEL OUTPUT WITH DATA--------------
# aus_data <- read.csv ("./Belgium RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# #15830 samples ( <- 2yrs, 2000-2005), possitive 21% ( n= 3394)
# par(mfrow=c(1,1))
# # label axes
# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
# #COMPARING THE MODEL OUTPUT WITH DATA--------------
# aus_data <- read.csv ("./Belgium RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# #15830 samples ( <- 2yrs, 2000-2005), possitive 21% ( n= 3394)
# par(mfrow=c(1,1))
# # label axes
# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
# #COMPARING THE MODEL OUTPUT WITH DATA--------------
# aus_data <- read.csv ("./Belgium RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# #15830 samples ( <- 2yrs, 2000-2005), possitive 21% ( n= 3394)
# par(mfrow=c(1,1))
# # label axes
# plot(time,inc,type='l',lwd=3,main = "Predicted RSV",xlab = "Time in weeks",ylab="New reported cases per week",ylim=c(0,max(aus_data[,"Cases"],inc)))
# # plot the data with the model output
# points(aus_data[,"Week"],aus_data[,"Cases"],pch=19,col='red')
rm(list = ls())
setwd("/home/phuong/phuonght/gitKraken_project/RSV")
library(deSolve)
library(ggplot2)
library(dplyr)
library(tidyverse)
######################################### #
# MODEL SETTINGS                     ----
######################################### #
pop_size          <- 11000000 # https://statbel.fgov.be/en, 11492641, growth rate 0.54%
num_days          <- 500
num_weeks         <- 52*10
num_days_infected <- 10  #[ 8-11], 6.7 is original estimate
num_days_exposed  <- 4   # [2,6]
num_days_waning   <- 200*(365/200)*10  # [148, 164] best fit
infected_seeds    <- 10#
# less than 1 yrs old
E1 <- 10/(pop_size/80)# 10 infected seeds
I1 <- 0
R1 <- 0
S1 <- 1 - E1 - I1 - R1
#  [0,2)
E2 <- 5/(pop_size/80) # 5 infected seed
I2 <- 0
R2 <- 0
S2 <- 1 - E1 - I1 - R1
E3 <- 2/(pop_size/80*78)  # 2 infected seeds
I3 <- 0
R3 <-
S3 <- 1- E1 - I1 - R1
######################################### #
# SET FUNCTION PARAMETERS            ----
######################################### #
# set time frame
times      <- seq(0, num_weeks, by = 1)
# set initial health states
states     <- c(S1 = S1,E1 = E1, I1 = I1, R1 = R1,
S2 = S2,E2 = E2, I2 = I2, R2 = R2,
S3 = S3,E3 = E3, I3 = I3, R3 = R3)
# set parameters
params     <- c(#sigma = 91.479/52, #rate of movement from latent to infectious stage
# gamma = 40.11/52, # recovery rate
sigma = 7/num_days_exposed, #rate of movement from latent to infectious stage
gamma = 7/num_days_infected, # recovery rate
nu=1.585/52,     # rate of loss of immunity
# nu=  7/ num_days_waning,    # rate of loss of immunity
eta1 = 1/52,            # aging rate 1 yr old
eta2 = 1/52,            # aging rate 2 yrs old
eta3 = 0.0139/52,           # aging rate > 2 yrs old
# eta1 = 1/(1*52),            # aging rate 1 yr old
# eta2 = 1/(1*52),            # aging rate 2 yrs old
# eta3 = 1/(78*52),           # aging rate > 2 yrs old
mu = 0.0135/52,             # birth rate
# mu = 1/(80*52),             # birth rate 1.66 2020
#Hannha Moore ref
# beta1 = 0.65,               # the degree of seasonality, range [0,1],higher value stronger seasonal drivers
# phi = 2.43,                 # phase shift?
# # beta0 = 2.05,               # average transmission rate# this
# beta0 = 10.19,               # average transmission rate# this
# for 3 classes of age
beta1 = 0.522,               # the degree of seasonality, range [0,1],higher value stronger seasonal drivers
phi = 2.43,                 # phase shift?
beta0 = 460/52,               #average transmission
# R0 = 3,                   # reproduction number
delta2 = 0.228,             # scaled susceptibility
delta3 = 0.6,
alpha2 = 1,                 # scaled infectiousness
alpha3 = 0.6                # scaled infectiousness
)
######################################### #
# CREATE SIRV FUNCTION               ----
######################################### #
# define a function for the ODE-solver with 3 function parameters (required)
#  * times  = current time point (not yet used here, in the absence of seasonality)
#  * states = current health states, to calculate updates
#  * params = epidemiogical parameters, used in the differential equations
#
# Note: updating the health states over time and keeping track of the changes, is handled by the
# ode-function of the 'deSolve' package.
sirv_func <- function(t, states, params) {
with(as.list(c(states, params)),
{
# define variables
# S1+E1+I1+R1 = 1
# S2+E2+I2+R2 = 1
# S3+E3+I3+R3 = 1
# beta <- beta0*(1+beta1*cos(2*pi*t/52+phi))
beta <- beta0*(1+beta1*sin(2*pi*t/52)) #
# calculate state changes
dS1 <- mu - beta*S1*(I1+alpha2*I2+alpha3*I3) - eta1*S1 + nu*R1
dE1 <- beta*S1*(I1+alpha2*I2+alpha3*I3) - eta1*E1 - sigma*E1
dI1 <- sigma*E1 - eta1*I1 - gamma*I1
dR1 <- gamma*I1 - eta1*R1 - nu*R1
dS2 <- eta1*S1 - delta2*beta*S2*(I1 +alpha2*I2 + alpha3*I3) - eta2*S2 + nu*R2
dE2 <- eta1*E1 + delta2*beta*S2*(I1 +alpha2*I2 + alpha3*I3) - eta2*E2 - sigma*E2
dI2 <- eta1*I1 + sigma*E2 - eta2*I2 - gamma*I2
dR2 <- eta1*R1 + gamma*I2 - eta2*R2 - nu*R2
dS3 <- eta2*S2 - delta3*delta2*beta*S3*(I1 + alpha2*I2 + alpha3*I3) - eta3*S3 + nu*R3
dE3 <- eta2*E2 + delta3*delta2*beta*S3*(I1 + alpha2*I2 + alpha3*I3) - eta3*E3 - sigma*E3
dI3 <- eta2*I2 + sigma*E3 - eta3*I3 - gamma*I3
dR3 <- eta2*R2 + gamma*I3 - eta3*R3 - nu*R3
# return (dS, dI, dR) as a vector in a list (required for the 'solve' function)
return(list(c(dS1, dE1, dI1, dR1,dS2, dE2, dI2, dR2, dS3, dE3, dI3, dR3)))
}
)
}
######################################### #
# SOLVE ODE                          ----
######################################### #
# use the 'ode' function of deSolve package with our SIR function, health states and parameters
out <- ode(func = sirv_func, y = states, times = times, parms = params)
plot(out)
out$S <- out[,"S1"] + out[,"S2"] + out[,"S3"]
out$E <- out[,"E1"] + out[,"E2"] + out[,"E3"]
out$I <- out[,"I1"] + out[,"I2"] + out[,"I3"]
out$R <- out[,"R1"] + out[,"R2"] + out[,"R3"]
# Total population
pop <- out[,"S"] + out[,"E"] + out[,"I"] + out[,"R"]
# weekly incidence
inc <- out[,"I1"]
inc2 <- out[,"I2"]
inc3 <- out[,"I3"]
time <- out[,"time"]
plot(time,pop,type='l',lwd=3,ylim = c(0,3))# checking the consistence of pop
# Plo"infectious" proportion I
ggplot(out%>%gather(key = "I", value = "value", starts_with("I")),
aes(x=time, y = value, colour = I))+
geom_point()
ggplot(out, aes(time))+
geom_line(aes(y = I1), color = "darkred")+
geom_line(aes(y = I2), color = "steelblue")+
ylab("")
#BELGIUM DATA-----------------
bel_data <- read.csv("./RSV data/RSV_cases_time_epistat.csv")
# total cases: 63301 , less than 2yrs: 56126, 1yr:42375,2yrs:13751
pro_case_less2yrs <- 56126/63301
pro_case_2yrs <- 13751/63301
pro_case_1yr <- 42375/63301
bel_data$week <- seq(1,dim(bel_data)[1])
# bel_data$cases.less2yrs <- round(bel_data$cases*pro_case_less2yrs)
bel_data$cases.1yr <- round(bel_data$cases*pro_case_1yr)
bel_data$cases.2yrs <- round(bel_data$cases*pro_case_2yrs)
# DEFINE HELP FUNCTION TO CALCULATE SUM OF SQUARES
get_sum_of_squares <- function(model_values,ref_values) {
return(sum(sqrt((model_values-ref_values)^2)))
}
# SET GOAL: to use the optimisation package
library(Rcpp)
library(optimization)
# plot real data
par(mfrow = c(1,1))
plot(bel_data$week,
bel_data$cases.1yr,
ylim = c(0, max(bel_data$cases.1yr)*1.5))
# plot initial model
lines(out$time,out$I1*pop_size,col=2,lwd=2)
plot(out$time,out$I1*pop_size,col=2,lwd=2)
# score for initial model
get_sum_of_squares(out$I1[1:length(bel_data$cases)]*pop_size,bel_data$cases.1yr)
# DEFINE FUNCTION TO RUN ODE WITH PARAMETER VECTOR X
x <- c(2.05,0.65,0) #beta0, beta1,
get_model_output <- function(x){
# params_fitting
params_fit = params
params_fit["beta0"] = x[1]
params_fit["beta1"] = x[2]
# params_fit["beta1"] = x[3]
# get output
out <- data.frame(ode(func = sirv_func, y = states, times = seq(0,num_weeks,1), parms = params_fit))
# shift in time (fill with 0)
out <- approx(x   = out$time + x[3],
y   = out$I1,
xout = seq(0,num_weeks,1),
rule = 2)
names(out) <- c('time','I1')
# rescale time points
out$time <- out$time - min(out$time)
# return output
return(out)
}
# HELP FUNCTION TO CALCULATE SUM OF SQUARES GIVEN PARAMETERS 'X'
get_parameter_score <- function(x) {
# get model output given the parameters in "x"
model_out <- get_model_output(x)
# get model score
model_score <- get_sum_of_squares(model_out$I1[1:length(bel_data$cases)]*pop_size,bel_data$cases.1yr)
# return model score
return(model_score)
}
# try some combinations
get_parameter_score(c(2.05,0.65,0))
get_parameter_score(c(2.01,0.65,-52*11.96))
# HELP FUNCTION TO VISUALIZE THE MODEL FITTING
plot_model_fit <- function(x){
# get model output given the parameters in "x"
model_out <- get_model_output(x)
# get model score
model_score <- get_sum_of_squares(model_out$I1[1:length(bel_data$cases)]*pop_size,bel_data$cases.1yr)
# plot reference data
plot(bel_data$week,
bel_data$cases.1yr,
ylim = c(0,max(bel_data$cases.1yr)*2),
main = paste('score:',round(model_score,digits = 2)))
# plot initial model
lines(model_out$time,model_out$I1*pop_size,col=2,lwd=2)
# plot(model_out$time,model_out$I1*pop_size,col=2,lwd=2)
}
# try some combinations
plot_model_fit(c(2.05,0.65,0))
plot_model_fit(c(2.05,0.65,-52*11.96))
# try other function, by specifing lower and upper values
# num_days_infected <- 10 #[ 8-11]
# num_days_exposed  <- 4  # [2,6]
opt_param_sa <- optim_sa(fun = get_parameter_score, start = c(1.6, 0.4,-52*11.96),
trace = F,
lower = c(1.6,0.4,-52*11.96),
upper = c(2.2,1,52*11.96),
control = list(dyn_rf = T,
rf = 1.2,
t0 = 10, nlimit = 500, r = 0.6, t_min = 0.1
))$par
opt_param_sa
get_parameter_score(opt_param_sa)
plot_model_fit(opt_param_sa)
rm(list=ls())
setwd("/home/phuong/phuonght/gitKraken_project/RSV")
library(deSolve)
library(ggplot2)
library(dplyr)
######################################### #
# MODEL SETTINGS                     ----
######################################### #
pop_size          <- 2200000*3/4 # Western Australia pop.# metropolitan
# pop_size          <- 1861923; #2014 perth pop, 0-79 years,
num_days          <- 500
num_weeks         <- 52*190
num_days_infected <- 10  #[ 8-11], 6.7 is original estimate
num_days_exposed  <- 4   # [2,6]
num_days_waning   <- 160  # [148, 164] best fit
rm(list=ls())
setwd("/home/phuong/phuonght/gitKraken_project/RSV")
library(deSolve)
library(ggplot2)
library(dplyr)
######################################### #
# MODEL SETTINGS                     ----
######################################### #
pop_size          <- 11000000 # Western Australia pop.# metropolitan
num_days          <- 500
num_weeks         <- 52*190
num_days_infected <- 10  #[ 8-11], 6.7 is original estimate
num_days_exposed  <- 4   # [2,6]
num_days_waning   <- 160  # [148, 164] best fit
infected_seeds    <- 10 # ? 1= 1000
# each age group sum = 1
E1 <- infected_seeds/2/(pop_size)
I1 <- 0
R1 <- 0
S1 <- 1-E1-I1-R1
E2 <-infected_seeds/2/(pop_size) # greater than 2 yrs old
I2 <- 0
R2 <- 0
S2 <- 1-E2-I2-R2
######################################### #
# SET FUNCTION PARAMETERS            ----
######################################### #
# set time frame
times      <- seq(0, num_weeks, by = 1)
# set initial health states
states     <- c(S1 = S1,E1 = E1, I1 = I1, R1 = R1,
S2 = S2,E2 = E2, I2 = I2, R2 = R2)
# set parameters
params     <- c(#sigma = num_days_exposed, #rate of movement from latent to infectious stage
sigma = 1/0.57,            #best fit
# gamma = num_days_waning, # recovery rate
gamma = 1/1.4,           # best fit
# nu=  7/ num_days_waning,     # rate of loss of immunity
nu=  0.0438,     # rate of loss of immunity
eta1 = 1/(2*52),             # aging rate
eta2 = 1/(78*52),            # aging rate
# eta = 1/(80*52),             # death rate in general
mu = 1/(78*52),              # birth rate/deathrate
beta1 = 0.6495,                # the degree of seasonality, range [0,1],higher value stronger seasonal drivers
phi = 2.43,                  # phase shift?
beta0 = 1.9896,                #average transmission rate
# R0 = 3,                     # reproduction number
delta = 0.65,                # scaled susceptibility
alpha = 0.65                # scaled infectiousness
)
######################################### #
# CREATE SIRV FUNCTION               ----
######################################### #
# define a function for the ODE-solver with 3 function parameters (required)
#  * times  = current time point (not yet used here, in the absence of seasonality)
#  * states = current health states, to calculate updates
#  * params = epidemiogical parameters, used in the differential equations
#
# Note: updating the health states over time and keeping track of the changes, is handled by the
# ode-function of the 'deSolve' package.
sirv_func <- function(t, states, params) {
with(as.list(c(states, params)),
{
# define variables
# P <- (S1+E1+I1+R1+S2+E2+I2+R2)
beta <- beta0*(1+beta1*cos(2*pi*t/52+phi))
# N1= S1+E1+I1+R1
# N2= S2+E2+I2+R2
# N= S1+E1+I1+R1+S2+E2+I2+R2
# calculate state changes
dS1 <- mu - beta*S1*(I1+alpha*I2) - eta1*S1             + nu*R1
dE1 <-      beta*S1*(I1+alpha*I2) - sigma*E1 - eta1*E1
dI1 <-                              sigma*E1 - gamma*I1 - eta1*I1
dR1 <-                                         gamma*I1 - nu*R1 - eta1*R1
dS2 <- eta1*S1 - delta*beta*S2*(I1+alpha*I2) - eta2*S2             + nu*R2
dE2 <- eta1*E1 + delta*beta*S2*(I1+alpha*I2) - sigma*E2 - eta2*E2
dI2 <- eta1*I1                               + sigma*E2 - gamma*I2 - eta2*I2
dR2 <- eta1*R1                                          + gamma*I2 - nu*R2  - eta2*R2
# return (dS, dI, dR) as a vector in a list (required for the 'solve' function)
return(list(c(dS1, dE1, dI1, dR1,dS2, dE2, dI2, dR2)))
}
)
}
######################################### #
# SOLVE ODE                          ----
######################################### #
# use the 'ode' function of deSolve package with our SIR function, health states and parameters
out <- ode(func = sirv_func, y = states, times = times, parms = params)
plot(out)
# summary(out)
times_output <- seq(num_weeks-(52*6)-36,num_weeks,1)# burning time ## shifting peaks
times_output <- times_output[1:312] # take exactly 6 years for later scaling of data
out <- out[out[,1] %in% times_output,] # skip the initial time points
out[,1] <- out[,1] - min(out[,1])# rescale time points
par(mfrow = c(1,1))
matplot(out[,1], out[,c(4,8)], type = "l", xlab = "time", ylab = "population fraction",
main = "")
legend("topright", col = 1:2, lty = 1:2, legend = c("I1","I2"))
# convert the 'out' matrix into a data-frame (to enable the use of '$' to access a column by name)
out <- as.data.frame(out)
out$S <- out[,"S1"] + out[,"S2"]
out$E <- out[,"E1"] + out[,"E2"]
out$I <- out[,"I1"] + out[,"I2"]
out$R <- out[,"R1"] + out[,"R2"]
# Total population
pop <- out[,"S1"] + out[,"E1"] + out[,"I1"] + out[,"R1"]+out[,"S2"] + out[,"E2"] + out[,"I2"] + out[,"R2"]
# Weekly reported DATA-----------------
report.data <- read.csv("./RSV data/Australia_RSV_2yrs_Hannah Moore.csv")
# weekly incidence
inc1 <- out[,"I1"]
inc2 <- out[,"I2"]
inc.less2yrs <- inc1*pop_size
inc.less2yrs <- inc1*pop_size/(sum(inc.less2yrs)/sum(report.data$case))# scaling the incidence for fiiting the data
sum(inc.less2yrs )
inc.older2yrs<- inc2*pop_size
time <- out[,"time"]
# Plot incidence (<2yrs)
par(mfrow=c(1,1))
plot(time,inc.less2yrs,type='l',lwd=3, col = 1)
# DEFINE HELP FUNCTION TO CALCULATE SUM OF SQUARES
get_sum_of_squares <- function(model_values,ref_values) {
return(sum(sqrt((model_values-ref_values)^2)))
}
# SET GOAL: to use the optimisation package
library(Rcpp)
library(optimization)
# plot real data
par(mfrow = c(1,1))
plot(report.data$week,
report.data$cases,
ylim = c(0, max(report.data$cases)*1.5))
# plot initial model
lines(out$time,inc.less2yrs,col=2,lwd=2)
getwd()
